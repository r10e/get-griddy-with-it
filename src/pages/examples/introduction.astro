---
import Layout from '../../layouts/Layout.astro';

export const title = 'Introduction';
export const number = '01';
export const abstract = `What's in this talk, and what is not?`;

const examples = (await Astro.glob('./*.{astro,vue}')).sort(
	(a, b) => a.number - b.number,
);

const ownNumber = parseInt(number);

const previousExample = examples.find(
	(example) => parseInt(example.number) === ownNumber - 1,
);
const previous = previousExample
	? { title: previousExample.title, url: previousExample.url }
	: null;
const nextExample = examples.find(
	(example) => parseInt(example.number) === ownNumber + 1,
);
const next = nextExample
	? { title: nextExample.title, url: nextExample.url }
	: null;
---

<Layout
	title={title}
	number={number}
	abstract={abstract}
	previous={previous}
	next={next}
>
	<main class="box">
		<p>What's in this talk:</p>
		<ul>
			<li>What CSS Grid is.</li>
			<li>How it can be used.</li>
			<li>What most values mean.</li>
			<li>Useful examples!</li>
			<li>A Q&amp;A!</li>
		</ul>

		<p>What's <strong>not</strong> in this talk:</p>
		<ul>
			<li>A history lesson on CSS layouting.</li>
			<li>A comparison to other layouting tools.</li>
			<li>
				An <em>exhaustive</em> overview---there's too much! See
				<a href="https://css-tricks.com/snippets/css/complete-guide-grid"
					>this article by CSS Tricks
				</a> for that.
			</li>
			<li>A discussion on browser compatibility.</li>
		</ul>
	</main>
</Layout>

<style>
	main {
		display: grid;
		grid-auto-flow: column;
		grid-template-rows: auto auto;
	}
</style>
